CLIENT SIDE
1 - No teu renderer das cartas adicionas o que esta com o comentario //dragndrop

    class Card {
  static width = 120;
  static height = 190;
  constructor(card, x, y, cimg, himg) {
    this.card = card;
    this.x = x;
    this.y = y;
    this.cimg = cimg;
    this.himg = himg;

    //dragndrop
    this.dragging = false;
    this.offsety = 0;
    this.offsetx = 0;
    this.dragx = 0;
    this.dragy = 0;
    this.selected = false;
  }

  draw() {
      image(this.cimg, this.x, this.y, Card.width, Card.height);

      textAlign(CENTER, CENTER);
      fill(255);
      textStyle(BOLD);
      textSize(15);
      stroke(0);
      strokeWeight(2);
      text(
        this.card.ugc_crd_cost,
        this.x - 49,
        this.y - 80
      );
      text(
        this.card.ugc_crd_damage,
        this.x - 49,
        this.y + 80
      );
      text(
        this.card.ugc_crd_health,
        this.x + 49,
        this.y + 80
      );
      strokeWeight(1);
      noStroke();
      textSize(13);
      text(
        this.card.ugc_crd_name,
        this.x,
        this.y + 10
      );
      textSize(10);
      textAlign(CENTER, TOP);
      text(
        this.card.ugc_crd_gang,
        this.x,
        this.y + 20
      );
      textStyle(NORMAL);
      fill(0);
      noTint();

    //dragndrop
      if (this.dragging) {
        tint(255, 100);
        image(this.cimg, this.dragx, this.dragy, Card.width, Card.height);
        tint(255, 255);
      }
  }
}

class Deck {
  static titleHeight = 50;
  static nCards = 3;
  selectedCard = null;

  constructor(cardsInfo, x, y, clickAction, cardImg, hacksimg, dragAction) {
    this.x = x;
    this.y = y;
    this.width = Card.width * Deck.nCards;
    this.clickAction = clickAction;
    this.cardImg = cardImg;
    this.hacksimg = hacksimg;
    this.cards = this.createCards(cardsInfo);

    //dragndrop
    this.draggable = false;
    this.dragAction = dragAction;/*tens de meter isto no constructor*/
    this.draggingCard = null;
  }

  createCards(cardsInfo) {
    let cards = [];
    let x = this.x;
    for (let cardInfo of cardsInfo) {
      cards.push(
        new Card(cardInfo, x, this.y + Deck.titleHeight, this.cardImg, this.hacksimg)
      );
      x += Card.width;
    }
    return cards;
  }

  update(cardsInfo) {
    this.cards = this.createCards(cardsInfo);
  }

  //dragndrop
  updateDrag() {
    if (this.draggingCard !== null) {
        this.draggingCard.dragx = mouseX + this.draggingCard.offsetX;
        this.draggingCard.dragy = mouseY + this.draggingCard.offsetY;
    }
  }

  draw() {
    fill(0);
    noStroke();
    textSize(28);
    textAlign(CENTER, CENTER);
    for (let card of this.cards) {
      card.draw();
    }
  }

  //dragndrop
  press() {
    if (!this.draggable) {
      return;
    }
    for (let card of this.cards) {
        //este if é para saberes se o teu rato esta em cima da carta se tiver ele deixa te arrastar
      if (this.draggable && mouseX > card.x - Card.width / 2 && mouseX < card.x + Card.width / 2 && mouseY > card.y - Card.height / 2 && mouseY < card.y + Card.height / 2) {
        card.offsetX = card.x - mouseX;
        card.offsetY = card.y - mouseY;
        card.dragx = mouseX + card.offsetX;
        card.dragy = mouseY + card.offsetY;
        card.dragging = true;
        this.draggingCard = card;
      }
    }
  }

 //dragndrop
  release() {
    if (!this.draggable || this.draggingCard === null) {
      return;
    }
    this.draggingCard.dragging = false;
    if (this.dragAction) {
        //isto é o que vais mandar para a action.js
      this.dragAction(mouseX, mouseY, this.draggingCard.card);
    }
    this.draggingCard = null;
  }
  
}


2 - no teu actions.js adicionas isto:

    //crias esta function e das lhe o nome que quiseres
    async function dragndropToBoard(x, y, card) {
        //isto é para ir buscar as posiçoes do board que tens no renderer do Board
        let pos = GameInfo.board.getPlayerColumnAt(x, y);
        //isto é para jogares a carta que estas a arrastar na posiçao que largaste que obtens em cima
        playCardToBoard(card, pos);
    }   

    async function playCardToBoard(card, position) {
        let result = await requestPlayCardToBoard(card./*aqui metes o id que recebes do obeject card*/, position);
        if (result.successful) {
            await getGameInfo();
            await getBoardInfo();
            await getDecksInfo();
            alert(result.msg);
        }
    }

    //e depois onde tu metes a posiçao das tuas cartas adicionas a function dragndropToBoard
    GameInfo.playerDeck = new Deck(
        GameInfo.matchdeck,
        65,
        820,
        null,
        GameInfo.images.card,
        GameInfo.images.hack,
        dragndropToBoard
      );

3 - no teu gamerequest.js adicionas isto:

    async function requestPlayCardToBoard(CardId, Position) {
    try {
        const response = await fetch(''/*aqui metes o caminho para onde tu fazes para jogar as cartas*/, {
        headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
        },
        method: "PATCH",
        body: JSON.stringify({
            cardid: CardId,
            position: Position,
        }),
        });
        let result = await response.json();
        return { successful: response.status == 200, msg: result.msg };
    } catch (err) {
        // Treat 500 errors here
        console.log(err);
        return { err: err };
    }
    }

4 - no teu gameinfo.js adicionas isto GameInfo.playerDeck.draggable no sitio do comentario:

    static prepareUI() {
     if (GameInfo.game.player.state == "Playing") {
      GameInfo.endturnButton.show();
      GameInfo.choosedeck1button.hide();
      GameInfo.choosedeck2button.hide();
      GameInfo.playerDeck.draggable = true;/*aqui*/
    } else if (GameInfo.game.player.state == "Waiting") {
      GameInfo.endturnButton.hide();
      GameInfo.choosedeck1button.hide();
      GameInfo.choosedeck2button.hide();
      GameInfo.playerDeck.draggable = false;/*aqui*/
    } else if (GameInfo.game.player.state == "Score") {
      GameInfo.endturnButton.hide();
      GameInfo.choosedeck1button.hide();
      GameInfo.choosedeck2button.hide();
      GameInfo.scoreWindow.open();
      GameInfo.playerDeck.draggable = false;/*aqui*/
    }
  }

5 - no teu gamelib.js adicionas isto GameInfo.playerDeck.updateDrag() na function draw e adicionas mais isto:

    async function mousePressed() {
        if ( GameInfo.playerDeck) {
            GameInfo.playerDeck.press();
        }
    }

    async function mouseReleased() {
        if (GameInfo.playerDeck) {
            GameInfo.playerDeck.release();
        }
    }  